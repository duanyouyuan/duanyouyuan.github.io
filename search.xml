<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java8的特性</title>
    <url>/2021/05/14/Java8%E7%9A%84%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h1 id="Java8概述"><a href="#Java8概述" class="headerlink" title="Java8概述"></a>Java8概述</h1><ol>
<li><p>Java8（又称jdk1.8）是Java语言开发的一个主要版本。Oracle公司于2014年3月18日发布Java8</p>
</li>
<li><p>支持Lambda表达式</p>
</li>
<li><p>函数式接口</p>
</li>
<li><p>新的Stream API</p>
</li>
<li><p>新的日期 API</p>
</li>
<li><p>其他特性</p>
<span id="more"></span>
<h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2></li>
<li><p>Lambda表达式：特殊的匿名内部类，语法更简洁</p>
</li>
<li><p>Lambda表达式允许把函数作为一个方法的参数（函数作为方法参数传递），将代码像数据一样传递</p>
</li>
<li><p>基本语法</p>
<p>&lt;<code>函数式接口</code>&gt; &lt;<code>变量名</code>&gt; =（<code>参数1</code>,<code>参数2</code>……）<code>-&gt;</code> {</p>
<p>​        //<code>方法体</code></p>
<p>}</p>
</li>
<li><p>Lambda引入了新的操作符 “ <code>-&gt;</code>“，左侧是参数列表，右侧是方法体</p>
</li>
<li><p>注意事项：</p>
<ol>
<li>形参列表的数据类型会自动推断</li>
<li>如果形参列表为空，只需保留 ( )</li>
<li>如果形参只有 1 个，( ) 可以省略，只需要参数的名字即可</li>
<li>如果执行语句只有 1 句，且无返回值，{} 可以省略，若有返回值，则若想省去 {} ，则必须同时省略 <code>return</code> ，且执行语句也保证只有 1 句</li>
<li>Lambda不会生成一个单独的内部类文件</li>
</ol>
</li>
</ol>
<p>示例：<em>实现Runnable</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        function1();</span><br><span class="line">        function2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*匿名内部类*/</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.err.println(<span class="string">&quot;thread1---匿名内部类&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">new</span> Thread(runnable).start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*Lambda表达式*/</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Runnable runnable = () -&gt; &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;thread2---Lambda表达式1&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">new</span> Thread(runnable).start();</span><br><span class="line">        <span class="comment">/*只有一条语句，可以省略大括号*/</span></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;System.err.println(<span class="string">&quot;thread3---Lambda表达式2&quot;</span>)).start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><ol>
<li>如果一个接口只有一个抽象方法，则该接口称之为函数式接口，函数式接口可以使用Lambda表达式，Lambda表达式会被匹配到这个抽象方法上</li>
<li>@FunctionalInterface注解 检测接口是否符合函数式接口</li>
<li>常见函数式接口：<ol>
<li>Predicate 接口只有一个参数，返回boolean类型。该接口包含多种默认方法来将Predicate组合成其他复杂的逻辑（比如：与，或，非）；</li>
<li>Function 接口有一个参数并且返回一个结果，并附带了一些可以和其他函数组合的默认方法（compose, andThen）；</li>
<li>Supplier 接口返回一个任意范型的值，和Function接口不同的是该接口没有任何参数；</li>
<li>Consumer 接口表示执行在单个参数上的操作；</li>
<li>Comparator 是老Java中的经典接口， Java 8在此之上添加了多种默认方法；</li>
<li>Optional 不是函数是接口，这是个用来防止NullPointerException异常的辅助类型；</li>
</ol>
</li>
</ol>
<h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><ol>
<li>方法引用是Lambda的一种简写形式 。如果Lambda表达式方法体中只是调用一个特定的已经存在的方法，则可以使用方法引用</li>
<li>常见形式：<ol>
<li>对象 <code>::</code> 实例方法</li>
<li>类 <code>::</code> 静态方法</li>
<li>类 <code>::</code> 实例方法</li>
<li>类 <code>::</code> new </li>
</ol>
</li>
</ol>
<h2 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h2><ol>
<li>流（Stream）中保存对集合或数组数据的操作。和集合类似，但集合中保存的是数据</li>
<li>Stream 自己不会存储元素</li>
<li>Stream 不会改变源对象。相反它们会返回一个持有结果的新 Stream</li>
<li>Stream 操作是延迟执行的。这意味着它们会等到需要结果的时候才会执行</li>
<li>Stream 使用步骤：<ol>
<li>创建：新建一个流</li>
<li>中间操作：在一个或多个步骤中，将初始Stream转化到另一个Stream的中间操作</li>
<li>终止操作：使用一个终止操作来产生一个结果。该操作会强制它之前的延迟操作立即执行。在这之后该Stream就不能使用了 </li>
</ol>
</li>
<li>创建Stream<ol>
<li>通过Collection对象的 stream( ) 或 parallelStream( ) 方法</li>
<li>通过Arrays 类的 stream( ) 方法</li>
<li>通过Stream接口的 of( )、iterate ( )、generate( )方法</li>
<li>通过IntStream、LongStream、DoubleStream接口中的 of 、range 、rangeClosed方法</li>
</ol>
</li>
<li>中间操作<ol>
<li>filter （概率）、limit （限制）、skip （跳过）、distinct （去重）、sorted（排序）</li>
<li>map</li>
<li>parallel （并行）</li>
</ol>
</li>
<li>终止操作<ol>
<li>forEach 、min 、max 、count 、map 、reduce （规约）、collect （收集）</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Swagger2的使用</title>
    <url>/2021/05/14/Swagger2%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h4 id="使用Swagger2"><a href="#使用Swagger2" class="headerlink" title="使用Swagger2"></a>使用Swagger2</h4><p>1、依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>2、配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.controller&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Contact contact = <span class="keyword">new</span> Contact(<span class="string">&quot;段友元&quot;</span>, <span class="string">&quot;----------&quot;</span>, <span class="string">&quot;17371584524@163.com&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfo(</span><br><span class="line">                <span class="string">&quot;UserApi&quot;</span>, <span class="string">&quot;用户管理接口&quot;</span>, <span class="string">&quot;1.0&quot;</span>, <span class="string">&quot;urn:tos&quot;</span>,</span><br><span class="line">                contact, <span class="string">&quot;Apache 2.0&quot;</span>, <span class="string">&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</span>, <span class="keyword">new</span> ArrayList&lt;VendorExtension&gt;()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiModel(&quot;用户实体类&quot;)</span></span><br><span class="line"><span class="comment">//注解在Entity类上</span></span><br><span class="line"><span class="meta">@ApiModelProperty(&quot;姓名&quot;)</span></span><br><span class="line"><span class="comment">//注解在Entity类字段上</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;用户管理&quot;)</span></span><br><span class="line"><span class="comment">//注解在Controller类上</span></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;查询全部&quot;)</span></span><br><span class="line"><span class="comment">//注解在Controller类API上</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
        <tag>doc</tag>
      </tags>
  </entry>
</search>
